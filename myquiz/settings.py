"""
Django settings for myquiz project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from environ import Env # env파일 로드를 위해, (django-environ라이브러리의 기능)

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ENV 파일 로드  
env = Env()
Env.read_env()
env_path = BASE_DIR/".env" # .env파일의 경로를 BASE_DIR 아래 .env로 지정 
# print("env 파일 경로:", env_path)  # 경로가 제대로 출력되는지 확인
if env_path.is_file(): # 해당 경로에 파일이 존재하면,
    with env_path.open("rt", encoding="utf-8") as f: # rt: 읽기+텍스트 모드
        env.read_env(f, overwirte=True) # 이미 같은 이름의 환경변수가 로딩되어 있더라도, 덮어쓰기로 설정


# .env에 키 등록시, (key=value) 형식에서 = 양쪽에 공백이 없어야함!
OPENAI_API_KEY = env.str("OPENAI_API_KEY")
GOOGLE_SEARCH_ENGINE_ID = env.str("GOOGLE_SEARCH_ENGINE_ID")
GOOGLE_API_KEY = env.str("GOOGLE_API_KEY")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 토큰 암호화에 사용하는 키 # 이 키가 노출되지 않는다면, 암호화된 토큰으로 어떤 정보도 알아낼 수 없음
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '10.0.2.2',  # Flutter 에뮬레이터에서 접근할 때 사용하는 IP
]



# Application definition

INSTALLED_APPS = [
    "daphne", # daphne의 runserver 명령어로 대체됨(즉, ASGI로 서버 구동)
    "django.contrib.admin", 
    "django.contrib.auth", # 인증을 위한 앱 # 기본 User 모델을 여기서 가져옴
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",# DRF를 위한 앱
    "rest_framework.authtoken", # 기본 토큰 인증 방식으로 사용할 앱
    "users",  # 회원가입 & 로그인 기능을 수행하는 앱
    "quiz_room", # 퀴즈 서비스를 제공할 앱
    "battle", # 배틀 서비스를 제공할 앱
    "corsheaders", # 서버가 cors 정책 준수하도록 하는 앱
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware", # 순서 중요! # cors 관련 미들웨어 설정
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware", # POST요청 시 CSRF관련 403에러 발생한다면, 
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# 프론트엔드에서 리소스에 잘 접근할 수 있도록 처리 
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True


ROOT_URLCONF = "myquiz.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = "myquiz.wsgi.application"
ASGI_APPLICATION = "myquiz.asgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env("DB_NAME"), # DB명
        'USER': env("DB_USER"), 
        'PASSWORD': env("DB_PASSWORD"),
        'HOST': env("DB_HOST"),
        'PORT': env("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Rest framework
REST_FRAMEWORK = { # 전역 적용
    # 인증 방식으로 '토큰 방식'을 사용한다는 것을 정의하기 
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
}


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# 미디어 파일에 대한 경로 지정 
    # 파일 경로 설정시, 상대 경로로 간편 작성을 위한 설정임 
MEDIA_ULR = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"